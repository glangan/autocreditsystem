Builds on the foundation provided by the COMP SCI 1101-1102 sequence to introduce the fundamental concepts of data structures and the algorithms that proceed from them, and aspects of software engineering. Topics include recursion, the underlying philosophy of object-oriented programming, fundamental data structures (including stacks, queues, linked lists, hash tables, and trees), the basics of algorithmic analysis, and an introduction to the principles of language translation. - Review of elementary programming concepts - Fundamental data structures: Stacks; queues; linked lists - Object-oriented programming: Object-oriented design; encapsulation and information hiding; classes; separation of behaviour and implementation; class hierarchies; inheritance; polymorphism - Fundamental computing algorithms: O(N log N) sorting algorithms; - Recursion: The concept of recursion; recursive mathematical functions; simple recursive procedures; divide-and-conquer strategies; recursive backtracking; implementation of recursion - Basic algorithmic analysis: Asymptotic analysis of upper and average complexity bounds; identifying differences among best, average, and worst case behaviours; big "O," little "o," omega, and theta notation; - Algorithmic strategies: Brute-force algorithms; greedy algorithms; divide-and-conquer; backtracking; branch-and-bound; heuristics; pattern matching and string/text algorithms; numerical approximation algorithms - Overview of programming languages: Programming paradigms - Software engineering: Software validation; testing fundamentals, including test plan creation and test case generation; object-oriented testing - Software evolution: Software maintenance; characteristics of maintainable software; reengineering; legacy systems; software reuse