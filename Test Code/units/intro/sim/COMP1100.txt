Computer programs as a formal definition of a desired method or outcome (algorithm) are cornerstones in almost any current product design. Those programs are then mechanically translated and executed on a computer.
The course introduces the art of programming in small steps, starting from clearly structuring the required data. Typed functions, conditional expressions, and repetition (recursion) are introduced alongside as the basic methods to operate on this structured data. A key aim is to illustrate the interdependancy of algorithms and data structures - significantly, that data structures largely determine algorithms, for example, that products are processed by projections, unions by alternatives, and that recursive data structures such as lists are processed by recursive algorithms.
Programs also require time to execute in a computer system. Basic understanding of the relation between program design and execution time is an essential part of an efficient design.
For all but the simplest programs, some means of abstraction and structuring is required to manage the complexities faced by programmers, as individuals and as groups. The course introduces modularisation techniques and abstract data types, as a means of managing such complexity. Modular design is of fundamental and practical importance for program development and leads to elegant and maintainable programs.